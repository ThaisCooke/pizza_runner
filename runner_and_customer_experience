### B. Runner and Customer Experience:

--Note: I realized that for some reason, the table customer_orders is in 2020, and the table runners is in 2021. I altered the table runners for 2020 in order to use both tables in the same year calendar:

		UPDATE dbo.runners
		SET registration_date = '2020-01-01'
		WHERE runner_id = 1

		UPDATE dbo.runners
		SET registration_date = '2020-01-03'
		WHERE runner_id = 2

		UPDATE dbo.runners
		SET registration_date = '2020-01-08'
		WHERE runner_id = 3

		UPDATE dbo.runners
		SET registration_date = '2020-01-15'
		WHERE runner_id = 4


**Question 1**: How many runners signed up for each 1 week period?


	week_period	number_of_runners
		1	       2
		2	       1
		3	       1


-- I used the function DATEPART for this question:

		SELECT  DATEPART (WEEK, (registration_date)) AS week_period,
  			COUNT (*) AS number_of_runners
  			FROM runners
  			GROUP BY DATEPART (WEEK, (registration_date))


**Question 2**: What was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pickup the order?


		runner_id	avg_runner_time
		    1	              15
		    2	              24
		    3	              10


-- First, I joined the tables customer_orders and runner_orders:

		SELECT dbo.customer_orders.order_id, runner_id, order_time, pickup_time
  		FROM customer_orders
  		INNER JOIN runner_orders
  		ON customer_orders.order_id = runner_orders.order_id
  		WHERE pickup_time <> ' '


-- Then, I calculated the time difference on a CTE using DATEDIFF function and then the average using AVG function:

		WITH cte AS (SELECT runner_id, DATEDIFF(MINUTE, order_time, pickup_time) AS time_difference
  		FROM customer_orders
  		INNER JOIN runner_orders
  		ON customer_orders.order_id = runner_orders.order_id
  		WHERE pickup_time <> ' ')

  		SELECT runner_id, AVG (time_difference) AS avg_runner_time
  		FROM cte
  		GROUP BY runner_id
		
		

**Question 3**: Is there any relationship between the number of pizzas and how long the order takes to prepare?


		order_id	number_of_orders	pickup_minutes
		   1	               1	              10
		   2	               1	              10
		   5	               1	              10
		   7	               1	              10
		   10	               2	              16
		   3	               2	              21
		   8	               1	              21
		   4	               3	              30

-- First, I joined the tables customer_orders and runner_orders:

		SELECT dbo.customer_orders.order_id, runner_id, order_time, pickup_time
  		FROM customer_orders
  		INNER JOIN runner_orders
  		ON customer_orders.order_id = runner_orders.order_id
  		WHERE pickup_time <> ' '


-- Then, I calculated the time difference on a CTE using DATEDIFF function and then the count of pizzas using COUNT function:


		WITH cte AS (SELECT dbo.customer_orders.order_id, DATEDIFF(MINUTE, order_time, pickup_time) AS pickup_minutes
			FROM customer_orders
			INNER JOIN runner_orders
			ON customer_orders.order_id = runner_orders.order_id
			WHERE pickup_time <> ' ')

			SELECT order_id, COUNT (order_id) AS number_of_orders, pickup_minutes
			FROM cte
			GROUP BY order_id, pickup_minutes
			
			
**Question 4**: What was the average distance travelled for each customer?


		customer_id	distance
		    101	         20.000000
		    102	         16.333333
		    103	         23.000000
		    104	         10.000000
		    105	         25.000000


-- First, I joined the tables "runner_orders" and customer_orders":


		SELECT dbo.customer_orders.order_id, customer_id, distance
  			FROM customer_orders
  			INNER JOIN runner_orders
  			ON customer_orders.order_id = runner_orders.order_id
  			WHERE pickup_time <> ' '
		
	
		
-- Then, I had to modify the column 'distance' into numbers, removing the "Km":

		UPDATE runner_orders
		SET distance = '20'
		WHERE order_id = 1


		UPDATE runner_orders
		SET distance = '20'
		WHERE order_id = 2

		UPDATE runner_orders
		SET distance = '13.4'
		WHERE order_id = 3

		UPDATE runner_orders
		SET distance = '25'
		WHERE order_id = 7

		UPDATE runner_orders
		SET distance = '23.4'
		WHERE order_id = 8

		UPDATE runner_orders
		SET distance = '10'
		WHERE order_id = 10

--Then, I calculuated the average distance using AVG and CAST to convert from VARCHAR into NUMERIC:

		SELECT customer_id, AVG(CAST (runner_orders.distance AS numeric)) AS distance
		FROM customer_orders
  		INNER JOIN runner_orders
  		ON customer_orders.order_id = runner_orders.order_id
  		WHERE pickup_time <> ' '
		GROUP BY customer_id
		

**Question 5**: What was the difference between the longest and shortest delivery times for all orders?

		delivery_time_difference
			30



-- First, I had to modify the column 'duration' into numbers:

		UPDATE runner_orders
  		SET duration = '32'
  		WHERE order_id = 1

  		UPDATE runner_orders
  		SET duration = '27'
  		WHERE order_id = 2

  		UPDATE runner_orders
  		SET duration = '20'
  		WHERE order_id = 3

  		UPDATE runner_orders
  		SET duration = '25'
  		WHERE order_id = 7

  		UPDATE runner_orders
  		SET duration = '15'
  		WHERE order_id = 8

  		UPDATE runner_orders
  		SET duration = '10'
  		WHERE order_id = 10

-- Then, I modified the column "duration" from VARCHAR to INT:

		ALTER TABLE runner_orders
  		ALTER COLUMN duration int


--Now, I calculated the difference using the functions MAX and MIN:

		SELECT 
    		MAX(duration) - MIN(duration) AS delivery_time_difference
		FROM runner_orders
		WHERE duration <> ' '
		
		

**Question 6**: What was the average speed for each runner for each delivery and do you notice any trend for these values?


	runner_id	customer_id	order_id	pizza_count	distance	avg_speed	day_of_week	Traffic
	1		101		1		1		20		37.50		Wednesday	Rush Hour
	1		101		2		1		20		44.44		Wednesday	Rush Hour
	1		102		3		2		13		39.00		Thursday	Late night
	1		104		10		2		10		60.00		Saturday	Rush Hour
	2		102		8		1		23		92.00		Thursday	Late night
	2		103		4		3		23		34.50		Saturday	Regular Traffic
	2		105		7		1		25		60.00		Wednesday	Late night
	3		104		5		1		10		40.00		Wednesday	Late night

-- Query using functions COUNT, CAST and ROUND:

		SELECT runner_id, customer_id, dbo.customer_orders.order_id, 
		COUNT(dbo.customer_orders.order_id) AS pizza_count, 
		CAST(distance AS numeric) AS distance,
		ROUND((CAST(distance AS numeric)/duration * 60), 2) AS avg_speed, 
		DATENAME (WEEKDAY, (order_time)) AS day_of_week,
		CASE WHEN 
		DATEPART (HOUR, (order_time)) BETWEEN 18 AND 20 THEN 'Rush Hour'
		WHEN DATEPART (HOUR, (order_time)) BETWEEN 21 AND 23 THEN 'Late night' 
		ELSE 'Regular Traffic'
		END AS Traffic
		FROM runner_orders 
		JOIN customer_orders 
		ON dbo.customer_orders.order_id = dbo.runner_orders.order_id
		WHERE distance <> ' '
		GROUP BY runner_id, customer_id, dbo.customer_orders.order_id, distance, duration, DATEPART (HOUR, (order_time)), DATENAME (WEEKDAY, (order_time))
		ORDER BY runner_id;
		
*TRENDS*:

*Runner 1*: Had the most orders. He seems to have a steady speed average, expect for one order number 10, when his average speed was up (since it was a Saturday, most likely he didn't hit much traffic)

*Runner 2*: Had the most discrepancy in the speed averages. 

*Runner 3*: Needs to pick up more orders for comparing. 


**Question 7**: What is the successful delivery percentage for each runner?

		runner_id	success_perc
		1		100
		2		75
		3		50
		
		
	SELECT runner_id, 
 	ROUND(100 * SUM
  	(CASE WHEN duration = 0 THEN 0
  	ELSE 1
  	END) / COUNT(*), 0) AS success_perc
	FROM runner_orders
	GROUP BY runner_id;
	


