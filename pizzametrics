### A. Pizza Metrics
  
  **Question 1**: How many pizzas were ordered?
  
	number_of_orders 
	       14
	      
                   
  
  -- Using the COUNT function:
  
        SELECT COUNT (*) AS number_of_orders
        FROM customer_orders
        
 
 **Question 2**: How many unique customer orders were made?
 
        customer_id	        unique_orders
               101	            3
               102	            2
               103	            2
               104	            2
               105	            1
             
             
 -- I used the functions COUNT DISTINCT and GROUP BY:
 
        SELECT customer_id, COUNT (Distinct order_id) AS unique_orders
        FROM customer_orders
        GROUP BY customer_id
        
        
**Question 3**: How many successful orders were delivered by each runner?

        runner_id	successful_orders
            1	            4
            2	            3
            3	            1
            
            
 -- I used the functions COUNT, WHERE and GROUP BY :
 
        SELECT runner_id, COUNT (order_id) AS successful_orders
        FROM runner_orders
        WHERE cancellation = ' '
        GROUP BY runner_id
        

**Question 4**: How many of each type of pizza was delivered?

        Type_of_pizza	    Number_of_orders
           Meatlovers	        10
           Vegetarian	        4


-- First, I joined the tables pizza_names and customer_orders:

        SELECT pizza_name, order_id, customer_id
        FROM pizza_names
        INNER JOIN customer_orders
        ON pizza_names.pizza_id = customer_orders.pizza_id
        

-- Then I used COUNT function, however, I was getting an error message:

*Msg 306, Level 16, State 2, Line 16 The text, ntext, and image data types cannot be compared or sorted, except when using IS NULL or LIKE operator*


-- It turned out that the pizza_names column was in **text**, while the other columns from the table customer_orders were in **varchar**. I wrote the same query, using the CAST function:

        SELECT CAST(pizza_name AS VARCHAR(100)) AS Type_of_pizza, COUNT (CAST (pizza_name AS VARCHAR(100))) Number_of_orders
        FROM pizza_names
        INNER JOIN customer_orders
        ON pizza_names.pizza_id = customer_orders.pizza_id
        GROUP BY CAST (pizza_name AS VARCHAR(100))
        
        
 -- That query gave me the desired result
 
 
 **Question 5**: How many Vegetarian and Meatlovers were ordered by each customer?
 
        customer_id	        Number_of_pizzas	        Type_of_pizza
            101	                    2	                    Meatlovers
            101	                    1	                    Vegetarian
            102	                    2	                    Meatlovers
            102	                    1	                    Vegetarian
            103	                    3	                    Meatlovers
            103	                    1	                    Vegetarian
            104	                    3	                    Meatlovers
            105	                    1	                    Vegetarian
 
 -- First, I joined the tables pizza_names and customer_orders:
 
        SELECT pizza_name, order_id, customer_id
        FROM pizza_names
        INNER JOIN customer_orders
        ON pizza_names.pizza_id = customer_orders.pizza_id
        
-- Then, I used the functions COUNT, GROUP BY and ORDER BY (remembering to use CAST for pizza_name column)


           SELECT customer_id, COUNT (*) AS Number_of_pizzas, CAST (pizza_name AS VARCHAR(100)) AS Type_of_pizza
		   FROM pizza_names
           INNER JOIN customer_orders
           ON pizza_names.pizza_id = customer_orders.pizza_id
		   GROUP BY customer_id, CAST (pizza_name AS VARCHAR(100))
		   ORDER BY customer_id



**Question 6**: What was the maximum number of pizzas delivered in a single order?

		number_of_pizzas
		        3


-- First, I joined the tables customer_orders and runner_orders, eliminating the orders that had been cancelled:

		SELECT dbo.customer_orders.order_id, distance, customer_id
  		FROM customer_orders
  		INNER JOIN runner_orders
  		ON customer_orders.order_id = runner_orders.order_id
  		WHERE distance <> ' '
		

-- Then, I did one table for counting the number of customers that had placed orders, using the COUNT function:

		SELECT dbo.runner_orders.order_id, COUNT (customer_id) AS pizzas_per_order
  		FROM customer_orders
  		INNER JOIN runner_orders
  		ON customer_orders.order_id = runner_orders.order_id
  		WHERE distance <> ' '
  		GROUP BY dbo.runner_orders.order_id
		
		
-- Next, I put that on a cte in order to use the functions COUNT and MAX together:

		WITH cte_pizza_count AS
  		(SELECT dbo.customer_orders.order_id, COUNT (customer_id) AS pizzas_per_order
  		FROM customer_orders
  		INNER JOIN runner_orders
  		ON customer_orders.order_id = runner_orders.order_id
  		WHERE distance <> ' '
  		GROUP BY dbo.customer_orders.order_id)

  		SELECT MAX (pizzas_per_order) AS number_of_pizzas
  		FROM cte_pizza_count


**Question 7**: For each customer, how many delivered pizzas had at least 1 change and how many had no changes?


		customer_id	at_least_1_change	no_change
		    101	               0	           2
		    102	               0	           3
		    103	               3	           0
		    104	               2	           1
		    105	               1	           0

-- First, I joined the tables runner_orders and customer_orders, in order to select only the pizzas that had been delivered:

		SELECT dbo.runner_orders.order_id, customer_id, exclusions, extras
  		FROM runner_orders
  		INNER JOIN customer_orders
  		ON runner_orders.order_id = customer_orders.order_id
  		WHERE distance <> ' '
		
-- Then, I applied the SUM and CASE functions:

		SELECT customer_id,
 		SUM(CASE 
  		WHEN exclusions <> ' ' OR extras <> ' ' THEN 1
  		ELSE 0
  		END) AS at_least_1_change,
 		SUM(CASE 
  		WHEN exclusions = ' ' AND extras = ' ' THEN 1 
  		ELSE 0
  		END) AS no_change
		FROM runner_orders
  		INNER JOIN customer_orders
  		ON runner_orders.order_id = customer_orders.order_id
  		WHERE distance <> ' '
  		GROUP BY customer_id
  
  **Question 8**: How many pizzas were delivered that had both exclusions and extras?
  
  
  		customer_id	exclusions_and_extras
		  104	                 1
  
  -- First, I joined the tables runner_orders and customer_orders, in order to select only the pizzas that had been delivered:

		SELECT dbo.runner_orders.order_id, customer_id, exclusions, extras
  		FROM runner_orders
  		INNER JOIN customer_orders
  		ON runner_orders.order_id = customer_orders.order_id
  		WHERE distance <> ' '
		

-- Then, I used the functions SUM, CASE and WHERE (to filter out the customers that wanted both exclusions):
  
  
  		SELECT customer_id,  
  		SUM, (CASE 
		WHEN exclusions <> ' ' AND extras <> ' ' THEN 1 
  		ELSE 0
  		END) AS exclusions_and_extras
  		FROM runner_orders
  		INNER JOIN customer_orders
  		ON runner_orders.order_id = customer_orders.order_id
  		WHERE distance <> ' '
  		AND exclusions <> ' ' 
  		AND extras <> ' '
  		GROUP BY customer_id
		

**Question 9**: What was the total volume of pizzas ordered for each hour of the day?

		hour_of_day	number_of_pizzas
		     13	                3
		     18	                3
		     19	                1
		     21	                2
		     23	                3
		

-- First, I joined the tables runner_orders and customer_orders with the information necessary for this table:

		SELECT dbo.runner_orders.order_id, customer_id, order_time
  		FROM runner_orders
  		INNER JOIN customer_orders
  		ON runner_orders.order_id = customer_orders.order_id
  		WHERE distance <> ' '
  
  
-- Using the function DATEPART to extract the time of the day:

		SELECT  DATEPART (HOUR, (order_time)) AS hour_of_day,
  		COUNT (dbo.runner_orders.order_id) AS number_of_pizzas
  		FROM runner_orders
  		INNER JOIN customer_orders
  		ON runner_orders.order_id = customer_orders.order_id
  		WHERE distance <> ' '
  		GROUP BY DATEPART (HOUR, (order_time))
		
		
**Question 10**: What was the volume of orders for each day of the week?

		day_of_the_week		number_of_pizzas
	 	    Saturday	                5
		    Thursday	                3
		    Wednesday	                4
		    
		    
-- Similar query as the question before, using DATENAME instead:

		SELECT  DATENAME (WEEKDAY, (order_time)) AS day_of_the_week,
		COUNT (*) AS number_of_pizzas
		FROM runner_orders
		INNER JOIN customer_orders
		ON runner_orders.order_id = customer_orders.order_id
		WHERE distance <> ' '
		GROUP BY DATENAME (WEEKDAY, (order_time))


